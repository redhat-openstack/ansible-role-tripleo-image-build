---
# workarounds to not include a bunch of DIB elements with a single line of bash
- name: Template script with workarounds for overcloud-full image
  template:
    src: "{{ dib_workaround_script }}"
    dest: "{{ working_dir }}/dib-workaround.sh"

- name: DIB workarounds
  shell: >
    virt-customize -m {{ virt_customize_ram }}
    --smp {{ virt_customize_cpu }}
    -a {{ working_dir }}/overcloud-base.qcow2
    --run {{ working_dir }}/dib-workaround.sh
  environment:
    LIBGUESTFS_BACKEND: direct
  when: dib_workarounds

- name: script to prepare for image building with DIB
  template:
    src: "{{ dib_prepare_script }}"
    dest: "{{ working_dir }}/dib-prepare-script.sh"
    mode: 0744

- name: Run DIB prep script
  shell: >
    {{ working_dir }}/dib-prepare-script.sh
  become: true

- name: ensure we can sudo without requiring tty for async tasks
  lineinfile:
    dest: /etc/sudoers
    line: '#Defaults requiretty'
    regexp: '^Defaults\s+requiretty'
    backup: yes
  become: true

- name: DIB enviornment inject template
  template:
    src: dib-optional-env-inject.sh.j2
    dest: "{{ working_dir }}/dib-optional-env-inject.sh"
    mode: 0744
  become: true

- name: create images with DIB
  shell: |
    set -x
    export -p
    source {{ working_dir }}/dib-optional-env-inject.sh
    export -p
    disk-image-create -a amd64 -o {{ working_dir }}/{{ item.value.output_image }} \
    {% if item.value.elements is defined %}
    {{ item.value.elements | join(' ') }} \
    {% endif %}
    {% if item.value.projects is defined %}
    -p {{ item.value.projects | join(' -p ') }} \
    {% endif %}
    --min-tmpfs {{ item.value.min_tmpfs_size }} 2>&1 | tee {{ working_dir }}/{{ item.value.logfile }}
  environment:
    DIB_LOCAL_IMAGE:         "{{ working_dir }}/{{ item.value.base_image }}"
    ELEMENTS_PATH:           "{{ dib_elements_path }}"
    DIB_DEFAULT_INSTALLTYPE: package
    {{ item.value.env }}
  async: 3600
  poll: 0
  register: "async_var_{{ item.key }}"
  with_dict: "{{ artib_dib_images }}"

- name: Async_Poll --> Wait for tasks to complete
  async_status:
    jid: "async_var_{{ item.key }}.ansible_job_id"
  register: job_result
  until: job_result.finished
  retries: 720
  delay: 5
  with_dict: "{{ artib_dib_images }}"
