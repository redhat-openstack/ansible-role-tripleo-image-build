---

# TODO: Add image caching here
# TODO: https://github.com/redhat-openstack/ansible-role-tripleo-image-build/issues/19

# This task will download the image.  We're using `curl` here
# rather than `wget` because while `wget` has built-in retry
# capabilities, it is unable to handle `file://` URLs.  We instead
# use an ansible `until` loop, combined with curl's `-C-` option
# to continue interrupted downloads.
- name: Get minimal base image
  command: >
    curl -sfL -C- -o {{ artib_working_dir }}/minimal-base.qcow2 {{ artib_minimal_base_image_url }}
  args:
    chdir: "{{ artib_working_dir }}"
  register: curl_result
  until: curl_result.rc not in [18, 56]
  retries: 20
  delay: 5

#
# https://trello.com/c/o6g4kqcc/316-oooq-pipeline-improvements-reposync-reporting-on-deps-and-content-handle-network-hiccups-with-grace
#

# TODO: @trown, discuss local repo cache for IPA, or proper way to nuke extra cruft if that image is too big
# TODO: @trown, discuss resizing to account for repo sizes.  Currently delorean + delorean-deps is < 1gb


- block:
    - debug: msg="*** Image Generation Process --> caching local repos ***"

    - name: Create the root for local repository files (on buildhost)
      file:
        path: "{{ artib_reposync_buildhost_root }}/reposdir"
        state: directory
        mode: 0755

    - name: get repo files (on buildhost)
      shell: >
        set -eux;
        curl -Lo  {{ item.repo_fname }} {{ item.repo_url }};
        cp {{ item.repo_fname }} local.{{item.repo_fname}};
      with_items: artib_reposync_repo_files
      args:
        chdir: "{{ artib_reposync_buildhost_root }}/reposdir"

    - name: disable orig .repo's, enable local. and change to file URI's
      debug: msg="TODO sed or lineinfile (better)"

    - name: handle tools that need to be run (rhos-release, ceph, etc)
      debug: msg="TODO use artib_reposync_repo_invocations to VC install rpm and run"

    - name: inject repo files and perform reposync (on base image)
      shell: >
        vccmd="virt-customize {{ artib_vc_args }} -a minimal-base.qcow2 --run-command";

        virt-copy-in -a minimal-base.qcow2 {{ artib_reposync_buildhost_root }}/reposdir/. /etc/yum.repos.d;

        $vccmd "yum install -y yum-utils createrepo";

        $vccmd "reposync --newest-only --downloadcomps --download-metadata --download_path={{ artib_reposync_localrepo_root }}
        {% for item in artib_reposync_names_to_sync %}
        --repoid={{ item }}
        {% endfor %}
        " |& tee minimal-base-reposync.log;

      args:
        chdir: "{{ artib_working_dir }}"

  # end reposync block
  when: artib_reposync_enable


- name: Template script to setup repos in the base image
  template:
    src: "{{ artib_repo_script }}"
    dest: "{{ artib_working_dir }}/repo_setup.sh"

- name: Setup repos in the base image using virt-customize
  shell: virt-customize {{ artib_vc_args }} -a minimal-base.qcow2 --run repo_setup.sh > repo_setup.sh.log 2>&1
  environment:
    LIBGUESTFS_BACKEND: direct
  args:
    chdir: "{{ artib_working_dir }}"
