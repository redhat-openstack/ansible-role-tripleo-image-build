---
# workarounds to not include a bunch of DIB elements with a single line of bash
- name: Template script with workarounds for overcloud-full image
  template:
    src: "{{ dib_workaround_script }}"
    dest: "{{ working_dir }}/dib-workaround.sh"

- name: DIB workarounds
  shell: >
    virt-customize -m {{ virt_customize_ram }}
    --smp {{ virt_customize_cpu }}
    -a {{ working_dir }}/overcloud-base.qcow2
    --run {{ working_dir }}/dib-workaround.sh
  environment:
    LIBGUESTFS_BACKEND: direct
  when: dib_workarounds

- name: script to prepare for image building with DIB
  template:
    src: "{{ dib_prepare_script }}"
    dest: "{{ working_dir }}/dib-prepare-script.sh"
    mode: 0744

- name: Run DIB prep script
  shell: >
    {{ working_dir }}/dib-prepare-script.sh
  become: true

- name: ensure we can sudo without requiring tty for async tasks
  lineinfile:
    dest: /etc/sudoers
    line: '#Defaults requiretty'
    regexp: '^Defaults\s+requiretty'
    backup: yes
  become: true

# handle additional var env based DIB settings
- name: Optional DIB enviornmental inject template
  template:
    src: dib-optional-env-inject.sh.j2
    dest: "{{ working_dir }}/dib-optional-env-inject.sh"
    mode: 0744
  become: true

- name: Build the deploy ramdisk ironic tar
  shell: |
    source {{ working_dir }}/dib-optional-env-inject.sh
    disk-image-create \
    -a amd64 \
    -o {{ working_dir }}/deploy-ramdisk-ironic \
    dracut-ramdisk \
    base  \
    rhel7 \
    deploy-ironic \
    element-manifest \
    network-gateway \
    undercloud-package-install \
    pip-and-virtualenv-override \
    -p python-hardware \
    --min-tmpfs 5 2>&1 | tee {{ working_dir }}/deploy-ramdisk-ironic.log
  environment:
    DIB_LOCAL_IMAGE: "{{ working_dir }}/minimal-base.qcow2"
    DIB_DEFAULT_INSTALLTYPE: package
    ELEMENTS_PATH: "{{ dib_elements_path }}"
    DIB_YUM_REPO_CONF: "/etc/yum.repos.d/rhos-release-7-director.repo /etc/yum.repos.d/rhos-release-7.repo /etc/yum.repos.d/rhos-release-rhel-7.2.repo"
  async: 3600
  poll: 0
  register: done_build_deploy_ramdisk_ironic

- name: Build the discovery ramdisk tar
  shell: |
    source {{ working_dir }}/dib-optional-env-inject.sh
    disk-image-create \
    -a amd64 \
    -o {{ working_dir }}/discovery-ramdisk \
    dracut-ramdisk \
    base \
    rhel7 \
    ironic-discoverd-ramdisk-instack \
    element-manifest \
    network-gateway \
    undercloud-package-install \
    pip-and-virtualenv-override \
    -p python-hardware \
    --min-tmpfs 5 2>&1 | tee {{ working_dir }}/discovery-ramdisk.log
  environment:
    DIB_LOCAL_IMAGE: "{{ working_dir }}/minimal-base.qcow2"
    DIB_DEFAULT_INSTALLTYPE: package
    ELEMENTS_PATH: "{{ dib_elements_path }}"
    DIB_YUM_REPO_CONF: "/etc/yum.repos.d/rhos-release-7-director.repo /etc/yum.repos.d/rhos-release-7.repo /etc/yum.repos.d/rhos-release-rhel-7.2.repo"
  async: 3600
  poll: 0
  register: done_build_discovery_ramdisk


- name: Build overcloud-full image
  shell: |
    source {{ working_dir }}/dib-optional-env-inject.sh
    disk-image-create \
    -a amd64 \
    -o {{ working_dir }}/overcloud-full.qcow2 \
    base \
    rhel7 \
    overcloud-full \
    overcloud-controller \
    overcloud-compute \
    overcloud-ceph-storage \
    sysctl hosts baremetal \
    dhcp-all-interfaces \
    os-collect-config \
    heat-config-puppet \
    heat-config-script \
    puppet-modules \
    hiera \
    os-net-config \
    stable-interface-names \
    grub2-deprecated \
    element-manifest \
    network-gateway \
    undercloud-package-install \
    pip-and-virtualenv-override \
    --min-tmpfs 5 2>&1 | tee {{ working_dir }}/dib-overcloud-full.log
  environment:
    DIB_LOCAL_IMAGE: "{{ working_dir }}/overcloud-base.qcow2"
    DIB_DEFAULT_INSTALLTYPE: package
    ELEMENTS_PATH: "{{ dib_elements_path }}"
# Needed for corosync to be able to use hostnames
# https://bugs.launchpad.net/tripleo/+bug/1447497
    DIB_CLOUD_INIT_ETC_HOSTS: ''

- name: Async_Poll --> Wait for build_deploy_ramdisk_ironic task completion
  async_status:
    jid: "{{ done_build_deploy_ramdisk_ironic.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  retries: 720
  delay: 5

- name: Async_Poll --> Wait for discovery_ramdisk task completion
  async_status:
    jid: "{{ done_build_discovery_ramdisk.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  retries: 720
  delay: 5

